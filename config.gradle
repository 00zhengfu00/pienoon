/*
* Copyright 2014 Google Inc. All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import org.apache.tools.ant.taskdefs.condition.Os
model {
  buildTypes {
    debug
    release
  }
  platforms {
    x64 {
      architecture 'x86_64'
    }
  }
  repositories {
    libs(PrebuiltLibraries) {
      pthread {
        if(Os.isFamily(Os.FAMILY_UNIX)) {
          headers.srcDir '/usr/include'
          binaries.withType(StaticLibraryBinary) {
            staticLibraryFile = file('/usr/lib/x86_64-linux-gnu/libpthread.a')
          }
          binaries.withType(SharedLibraryBinary) {
            sharedLibraryFile = file('/usr/lib/x86_64-linux-gnu/libpthread.so')
          }
        }
      }
      rt {
        if(Os.isFamily(Os.FAMILY_UNIX)) {
          headers.srcDir '/usr/include'
          binaries.withType(StaticLibraryBinary) {
            staticLibraryFile = file('/usr/lib/x86_64-linux-gnu/librt.a')
          }
          binaries.withType(SharedLibraryBinary) {
            sharedLibraryFile = file('/usr/lib/x86_64-linux-gnu/librt.so')
          }
        }
      }
      c {
        if(Os.isFamily(Os.FAMILY_UNIX)) {
          headers.srcDir '/usr/include'
          binaries.withType(StaticLibraryBinary) {
            staticLibraryFile = file('/usr/lib/x86_64-linux-gnu/libc.a')
          }
          binaries.withType(SharedLibraryBinary) {
            sharedLibraryFile = file('/usr/lib/x86_64-linux-gnu/libc.so')
          }
        }
      }
      GL {
        if(Os.isFamily(Os.FAMILY_UNIX)) {
          headers.srcDir '/usr/include'
          binaries.withType(SharedLibraryBinary) {
            sharedLibraryFile = file('/usr/lib/nvidia-331/libGL.so')
          }
        }
      }
      GLU {
        if(Os.isFamily(Os.FAMILY_UNIX)) {
          headers.srcDir '/usr/include'
          binaries.withType(StaticLibraryBinary) {
            staticLibraryFile = file('/usr/lib/x86_64-linux-gnu/libGLU.a')
          }
          binaries.withType(SharedLibraryBinary) {
            sharedLibraryFile = file('/usr/lib/x86_64-linux-gnu/libGLU.so')
          }
        }
      }
      Xi {
        if(Os.isFamily(Os.FAMILY_UNIX)) {
          headers.srcDir '/usr/include'
          binaries.withType(StaticLibraryBinary) {
            staticLibraryFile = file('/usr/lib/x86_64-linux-gnu/libXi.a')
          }
          binaries.withType(SharedLibraryBinary) {
            sharedLibraryFile = file('/usr/lib/x86_64-linux-gnu/libXi.so')
          }
        }
      }
    }
  }
}

binaries.all {
  if (buildTypes == buildTypes.debug) {
    cppCompiler.define 'DEBUG=1'
  }
  if (buildTypes == buildTypes.release) {
    cppCompiler.define 'DEBUG=0'
  }
  if (toolChain in VisualCpp) {
    cppCompiler.args '/W4 /WX'
  }
  if (toolChain in Gcc) {
    cppCompiler.args '-Wall', '-Werror', '-Wno-long-long', \
      '-Wno-variadic-macros'
  }
}
