// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include "timeline.fbs";

namespace fpl.splat;

enum StateId:byte {
  Idling,
  Loading_1,
  Loading_2,
  Loading_3,
  Throwing,
  Blocking,
  HitByPie,
  KO,
  Won,
  Count // Must be last
}

enum LogicalInputs:ushort (bit_flags) {
  ThrowPie,
  Deflect,
  Left,
  Right,
  JustHit,
  NoHealth,
  AnimationEnd,
  Winning
}

table Condition {
  is_down:LogicalInputs;
  is_up:LogicalInputs;
  went_down:LogicalInputs;
  went_up:LogicalInputs;
  time:int = 0;
  end_time:int = 2147483647; // MAX_INT
}

table ConditionalEvent {
  condition:Condition;
  event:ushort;       // Identify what is happening in the event.
                      // For Splat, use EventId in splat_common.fbs.
  modifier:ushort;    // Meaning depends on 'event'. e.g. amount of damage.
}

table Transition {
  target_state:StateId;
  condition:Condition;
}

table CharacterState {
  id:StateId;
  transitions:[Transition];
  timeline:Timeline;
  conditional_events:[ConditionalEvent];
}

table CharacterStateMachineDef {
  states:[CharacterState];
  initial_state:StateId;
}

root_type CharacterStateMachineDef;
