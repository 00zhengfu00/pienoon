// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace fpl;

// TODO: These Splat-specific enums should be defined in their own .fbs file
// Once FlatBuffers supports using an arbitrary enum to set a ushort field,
// we should pull these out and change TimelineTexture to use a ushort instead.
enum RenderableId : ushort {
  CharacterIdle,
  CharacterThrow,
  CharacterAim,
  CharacterHit,
  CharacterKnockedOut,
  EnvironmentCloud,
  EnvironmentSun,
  EnvironmentStageFront,
  EnvironmentMaskingTape,
  EnvironmentTree,
  EnvironmentStoreFrontLeft,
  EnvironmentStoreSide,
  EnvironmentStoreFrontRight,

  Count // Must be last
}

// TODO: Same as RenderableId.
enum SoundId : ushort {
  ThrowPie,
  HitWithPie
}

enum EventId : ushort {
  TakeDamage,
  ReleasePie,
  LoadPie
}

// TODO: RenderableId to ushort. See TODO above.
struct TimelineRenderable {
  time:ushort;        // Time of event. Time 0 is start of timeline.
  renderable:RenderableId; // Identify the item to render.
}

struct TimelineSound {
  time:ushort;        // Time of event. Time 0 is start of timeline.
  sound:SoundId;      // Identify the sound to start playing at 'time'.
}

struct TimelineEvent {
  time:ushort;        // Time of event. Time 0 is start of timeline.
  event:EventId;      // Identify what is happening in the event.
  modifier:ushort;    // Meaning depends on 'event'. e.g. amount of damage.
}

table Timeline {
  end_time:ushort;
  renderables:[TimelineRenderable];
  sounds:[TimelineSound];
  events:[TimelineEvent];
}

root_type Timeline;
